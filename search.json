[{"path":"https://clement-lvd.github.io/stockr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 stockr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clement-lvd.github.io/stockr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clément Laverdet. Author, maintainer.","code":""},{"path":"https://clement-lvd.github.io/stockr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Laverdet C (2025). stockr: Fetch Financial Data. R package version 0.1, https://clement-lvd.github.io/stockr/, https://github.com/clement-LVD/stockr.","code":"@Manual{,   title = {stockr: Fetch Financial Data},   author = {Clément Laverdet},   year = {2025},   note = {R package version 0.1,     https://clement-lvd.github.io/stockr/},   url = {https://github.com/clement-LVD/stockr}, }"},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"stockr","dir":"","previous_headings":"","what":"Fetch Financial Data","title":"Fetch Financial Data","text":"stockr R package retrieve financial data Yahoo Finance API, given company names ticker symbols1. stockr functions return standardized data.frame consistent column names, allowing focus directly financial analysis. Main functions. * : Yahoo Finance API, e.g., https://query1.finance.yahoo.com/v1/finance/currencies † : Scraping https://finance.yahoo.com/lookup/ ‡ : Scraping https://finance.yahoo.com/markets/world-indices/","code":""},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fetch Financial Data","text":"can install development version stockr:","code":"devtools::install_github(\"clement-LVD/stockr\")"},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Fetch Financial Data","text":"Get ticker symbol actual values. Given keyword(s) companies names, search latest stock values stockr::get_info_from_name. Typically, start retrieving exact ticker symbol using stockr::get_info_from_name another way. can use ticker symbols fetch corresponding historical financial data (see ). Get historical financial data. Given ticker symbol(s), get historic financial values stockr::get_historic : lines data.frame daily values.","code":"library(stockr)  toyota_indices <- stockr::get_info_from_name(names = \"TOYOTA\")  head(toyota_indices, 1) # Results of the day, over all marketplaces #>   symbol                     name last price            sector   type exchange #> 1     TM Toyota Motor Corporation     189.28 Consumer Cyclical Stocks      NYQ #>   searched #> 1   TOYOTA # Fetch historical values, given ticker symbol(s) histo <- stockr::get_historic(symbols = c(\"SAAB-B.ST\", \"VOLV-B.ST\"), .verbose = FALSE)  str(histo) #> 'data.frame':    12816 obs. of  15 variables: #>  $ open            : num  18.5 17.7 17.1 17.1 16.5 ... #>  $ close           : num  17.4 17.1 17.1 17.1 16.9 ... #>  $ adjclose        : num  9.86 9.66 9.66 9.66 9.53 ... #>  $ low             : num  16.9 16.4 17.1 17.1 16.5 ... #>  $ high            : num  18.5 17.7 17.1 17.1 17 ... #>  $ volume          : int  313414 294565 0 0 313418 264509 165960 205163 151425 214397 ... #>  $ timestamp       : int  946886400 946972800 947059200 947145600 947232000 947491200 947577600 947664000 947750400 947836800 ... #>  $ date            : POSIXct, format: \"2000-01-03 09:00:00\" \"2000-01-04 09:00:00\" ... #>  $ currency        : chr  \"SEK\" \"SEK\" \"SEK\" \"SEK\" ... #>  $ symbol          : chr  \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" ... #>  $ shortname       : chr  \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" ... #>  $ longname        : chr  \"Saab AB (publ)\" \"Saab AB (publ)\" \"Saab AB (publ)\" \"Saab AB (publ)\" ... #>  $ exchangename    : chr  \"STO\" \"STO\" \"STO\" \"STO\" ... #>  $ fullexchangename: chr  \"Stockholm\" \"Stockholm\" \"Stockholm\" \"Stockholm\" ... #>  $ timezone        : chr  \"CET\" \"CET\" \"CET\" \"CET\" ... #>  - attr(*, \"symbols\")= chr [1:2] \"SAAB-B.ST\" \"VOLV-B.ST\" #>  - attr(*, \"date\")= Date[1:1], format: \"2025-03-27\" #>  - attr(*, \"currencies\")= chr \"SEK\" #>  - attr(*, \"n.currencies\")= int 1"},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"technical-details","dir":"","previous_headings":"","what":"Technical details","title":"Fetch Financial Data","text":"Role stockr ‘Reach Yahoo Finance R’ ecosystem. packages partially redundant stockr : quantmod yahoofinancer. stockr minimal amount dependencies ecosystem, packages certainly offer functions, e.g., quantmod offers time series data visualization methods. data.frame historical financial values returned packages different properties, see .","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_changes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Exchange Rates from Yahoo Finance, Given Devises — get_changes","title":"Get Exchange Rates from Yahoo Finance, Given Devises — get_changes","text":"function retrieves exchange rates given currency pair. Default convert USD ($) Source Yahoo Finance API. returns data.frame daily exchange rate data. Returned data.frame historical values day latest insights within attributes Returned values supposed minute within day, less (≃ 1200 obs. ± 200 obs.).","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_changes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Exchange Rates from Yahoo Finance, Given Devises — get_changes","text":"","code":"get_changes(from = NULL, to = \"USD\")"},{"path":"https://clement-lvd.github.io/stockr/reference/get_changes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Exchange Rates from Yahoo Finance, Given Devises — get_changes","text":", default = NULL character string representing base currency (e.g., \"USD\"). , default = \"USD\" character string representing target currency (e.g., \"EUR\").","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_changes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Exchange Rates from Yahoo Finance, Given Devises — get_changes","text":"dataframe daily exchange rates. returned dataframe contains following columns: timestamp int, timestamp rate. rate.high Numeric, highest exchange rate day. rate.low Numeric, lowest exchange rate day. rate.open Numeric, opening exchange rate day. rate.volume Numeric, trading volume day. rate.close Numeric, closing exchange rate day. date POSIXct, corresponding date (YYYY-MM-DD).","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_changes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Exchange Rates from Yahoo Finance, Given Devises — get_changes","text":"function also returns additional insights data.frame attributes. key attributes include latest informations Yahoo Finance API : currency character, base currency. symbol character, Yahoo Finance symbol (e.g., \"EURUSD=X\"). exchange_name character, exchange place name, .e. CCY currencies. regularmarketprice numeric, latest market price. regularmarketdayhigh numeric, market highest price day. regularmarketdaylow numeric, market lowest price day. fifty_two_week_high numeric, highest price last 52 weeks. fifty_two_week_low numeric, lowest price last 52 weeks. previous_close numeric, last closing price. timezone character, market's timezone. date POSIXct Equivalent timestamp regularmarketprice, date observation. character, currency converted another, e.g., value 1$ ('USD'), want receive certain amount currency reach 1$. character, currency want convert : numeric values (integer) line data.frame expressed currency.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_changes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Exchange Rates from Yahoo Finance, Given Devises — get_changes","text":"","code":"# Fetch exchange rate data for USD to EUR df <- get_changes(from = c(\"USD\", \"EUR\"), to = \"RON\") # Convert USD & EUR to Romanian Leu (RON) head(df) #>   currency   symbol exchangename fullexchangename instrumenttype firsttradedate #> 1      RON USDRON=X          CCY              CCY       CURRENCY     1120172400 #> 2          EURRON=X          CCY              CCY       CURRENCY     1120172400 #>   regularmarkettime hasprepostmarketdata gmtoffset timezone #> 1        1743035922                FALSE         0      GMT #> 2        1743035726                FALSE         0      GMT #>   exchangetimezonename regularmarketprice fiftytwoweekhigh fiftytwoweeklow #> 1        Europe/London             4.6268           4.8828          4.4281 #> 2        Europe/London             4.9754           4.9820          4.9060 #>   regularmarketdayhigh regularmarketdaylow regularmarketvolume longname #> 1                4.634              4.6267                   0  USD/RON #> 2                4.976              4.9749                   0  EUR/RON #>   shortname chartpreviousclose previousclose scale pricehint datagranularity #> 1   USD/RON             4.6310        4.6310     4         4              1m #> 2   EUR/RON             4.9753        4.9753     4         4              1m #>   range pre_timezone  pre_start    pre_end pre_gmtoffset regular_timezone #> 1    1d          GMT 1743033600 1743033600             0              GMT #> 2    1d          GMT 1743033600 1743033600             0              GMT #>   regular_start regular_end regular_gmtoffset post_timezone post_start #> 1    1743033600  1743119940                 0           GMT 1743119940 #> 2    1743033600  1743119940                 0           GMT 1743119940 #>     post_end post_gmtoffset                date from  to #> 1 1743119940              0 2025-03-27 00:38:42  USD RON #> 2 1743119940              0 2025-03-27 00:35:26  EUR RON # or pass like a named list of character df2 <- get_changes(from = c(\"EUR\" = \"RON\", \"USD\" = \"EUR\")) # Or indicate paired values as 2 list : same_as_df2 <- get_changes(from = c(\"EUR\", \"USD\"), c(\"RON\" , \"EUR\")) # Access metadata attributes attr(df, \"insights\") #> NULL"},{"path":"https://clement-lvd.github.io/stockr/reference/get_currencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Financial currencies Names — get_currencies","title":"Fetch Financial currencies Names — get_currencies","text":"function fetches table financial indices (currencies) Yahoo Finance. Optionally, can filter results include specified indices.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_currencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Financial currencies Names — get_currencies","text":"","code":"get_currencies(keep = NULL)"},{"path":"https://clement-lvd.github.io/stockr/reference/get_currencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Financial currencies Names — get_currencies","text":"keep character vector symbols filter results. NULL (default), filtering applied, available indices returned.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_currencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Financial currencies Names — get_currencies","text":"data frame containing unique financial indices (currencies). table columns like symbol, name, relevant information, column names lowercase. keep specified, matching indices returned.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_currencies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch Financial currencies Names — get_currencies","text":"function sends request Yahoo Finance's API fetch list available currencies. processes results returns data frame. internet connection available, warning message shown.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_currencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Financial currencies Names — get_currencies","text":"","code":"# Fetch all available indices all_indices <- get_currencies()  # Fetch only specific indices selected_indices <- get_currencies(keep = c(\"USD\", \"EUR\"))"},{"path":"https://clement-lvd.github.io/stockr/reference/get_historic.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch historical financial data indices — get_historic","title":"Fetch historical financial data indices — get_historic","text":"Given indices names (.e. ticker symbol), function retrieves historical stock market data finance.yahoo.com. Answer data.frame standardized colnames.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_historic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch historical financial data indices — get_historic","text":"","code":"get_historic(symbols = c(\"SAAB-B.ST\"), wait.time = 0, .verbose = T, ...)"},{"path":"https://clement-lvd.github.io/stockr/reference/get_historic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch historical financial data indices — get_historic","text":"symbols character character string representing financial indices search , e.g., ticker symbol(s). wait.time double, default = 0 character string representing additional waiting time 2 calls Yahoo API. .verbose logical, default = TRUE. TRUE, send messages console. ... Arguments passed get_yahoo_data symbol character string representing symbol financial instrument (e.g., \"AAPL\" Apple). start_date character string representing start date format \"YYYY-MM-DD\". NULL, data starts 1970-01-01. end_date character string representing end date format \"YYYY-MM-DD\". NULL, data retrieved current date. interval character string representing interval returned datas : default return daily values. intervals filter daily values, depending desired interval. Valid interval \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\".","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_historic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch historical financial data indices — get_historic","text":"data frame containing historical financial data following columns: open numeric opening price period (default day). close numeric closing price period (default day). adjclose numeric adjusted closing price period, accounts corporate actions like dividends stock splits. low numeric lowest price period (default day). high numeric highest price period (default day). volume integer traded volume. timestamp integer Unix timestamps corresponding data point. date POSIXct day financial data point. currency character currency data reported, depending marketplace. symbol character stock financial instrument symbol (e.g., \"AAPL\"). shortname character abbreviated name company financial instrument. longname character full name company financial instrument. exchangename character name exchange marketplace financial instrument listed. fullexchangename character full name exchange marketplace. timezone character timezone data reported.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_historic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch historical financial data indices — get_historic","text":"Return data.frame (see returned columns 'Value' section) additional attributes : symbols: symbols originally asked user date: date data retrieved currencies: currencies within data.frame n.currencies: number currencies within data.frame min.date: lowest (ancient) date-value within data.frame max.date: maximum (recent) date-value within data.frame","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/stockr/reference/get_historic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch historical financial data indices — get_historic","text":"","code":"datas <- get_historic(symbols = c(\"VOLCAR-B.ST\", \"SAAB-B.ST\") ) #>  #> => 2 request(s) to Yahoo Finance (ETA :  0.6  sec')   VOLCAR-B.ST [OK]                                                                                                       SAAB-B.ST [OK]"},{"path":"https://clement-lvd.github.io/stockr/reference/get_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Stock Market Indices from Yahoo Finance — get_indices","title":"Retrieve Stock Market Indices from Yahoo Finance — get_indices","text":"function fetches real-time stock market indices, including price, change, percentage change, Yahoo Finance.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Stock Market Indices from Yahoo Finance — get_indices","text":"","code":"get_indices()"},{"path":"https://clement-lvd.github.io/stockr/reference/get_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Stock Market Indices from Yahoo Finance — get_indices","text":"data frame following columns: symbol Character. ticker symbol index (e.g., ^GSPC S&P 500). name Character. full name index (e.g., \"S&P 500\"). price numeric  current value index. change numeric absolute change index value. change_percent numeric percentage change index value.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Stock Market Indices from Yahoo Finance — get_indices","text":"","code":"if (FALSE) { # \\dontrun{ indices <- get_indices() head(indices) } # }"},{"path":"https://clement-lvd.github.io/stockr/reference/get_info_from_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch latest global stock information and ticker symbol, based on company name(s) — get_info_from_name","title":"Fetch latest global stock information and ticker symbol, based on company name(s) — get_info_from_name","text":"Given companies names, function retrieves overall stock market data (performing scraping https://finance.yahoo.com ). returns data frame ticker symbol various exchange , companies names, last price marketplace, sector/category (available), type (e.g., \"stocks\") , exchange marketplace name initially searched companies names.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_info_from_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch latest global stock information and ticker symbol, based on company name(s) — get_info_from_name","text":"","code":"get_info_from_name(names, exchange = NULL, sector = NULL)"},{"path":"https://clement-lvd.github.io/stockr/reference/get_info_from_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch latest global stock information and ticker symbol, based on company name(s) — get_info_from_name","text":"names character string representing company name search . exchange (optionnal) character string representing exchange place(s) consider (exact match). Default keep exchange places. sector (optionnal)  character string representing sector(s) consider (exact match). Default keep results.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_info_from_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch latest global stock information and ticker symbol, based on company name(s) — get_info_from_name","text":"data frame columns: - symbol: stock ticker symbol yahoo - name: full company name. - last_price: latest available price. - sector: sector industry category (available). - type: type asset (certainly \"stocks\"). - exchange: stock exchange place stock. searched: original names searched","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/stockr/reference/get_info_from_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch latest global stock information and ticker symbol, based on company name(s) — get_info_from_name","text":"","code":"oil <- get_info_from_name(names = c(\"TOTAL\", \"SHELL\", \"BP\"), sector = \"Energy\")  #Get data on marketplace(s) swedish <- get_info_from_name(names = c(\"SAAB\", \"VOLVO\"),  exchange = c(\"STO\", \"PAR\"))"},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"Given symbol financial value, function retrieves historical financial data Yahoo Finance answer data.frame historical values. data includes open stock price, high, low, close, volume, adjusted close prices, along timestamps (.e. day associated measures).","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"","code":"get_yahoo_data(   symbol = \"AAPL\",   start_date = NULL,   end_date = NULL,   interval = \"1d\" )"},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"symbol character string representing symbol financial instrument (e.g., \"AAPL\" Apple). start_date character string representing start date format \"YYYY-MM-DD\". NULL, data starts 1970-01-01. end_date character string representing end date format \"YYYY-MM-DD\". NULL, data retrieved current date. interval character string representing interval returned datas : default return daily values. intervals filter daily values, depending desired interval. Valid interval \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\".","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"data frame containing historical financial data following columns: open numeric opening price period (default day). close numeric closing price period (default day). adjclose numeric adjusted closing price period, accounts corporate actions like dividends stock splits. low numeric lowest price period (default day). high numeric highest price period (default day). volume integer traded volume. timestamp integer Unix timestamps corresponding data point. date POSIXct day financial data point. currency character currency data reported, depending marketplace. symbol character stock financial instrument symbol (e.g., \"AAPL\"). shortname character abbreviated name company financial instrument. longname character full name company financial instrument. exchangename character name exchange marketplace financial instrument listed. fullexchangename character full name exchange marketplace. timezone character timezone data reported.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"default data.frame line day. user provide another interval range '1d' (one day), lines filtered , order match desired interval range. Valid interval ranges : \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\". function allows user specify date range using start end dates. date range specified, retrieves available data beginning time (default start) current date (default end).","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"","code":"data <- get_yahoo_data(symbol = \"SAAB-B.ST\", start_date = \"2020-01-01\", interval = \"5d\")   head(data) #>     open  close adjclose    low   high  volume  timestamp                date #> 1 84.575 85.050 80.94996 83.825 85.050 1671108 1579161600 2020-01-16 08:00:00 #> 2 86.000 85.300 81.18790 84.750 86.000  888888 1579593600 2020-01-21 08:00:00 #> 3 78.825 78.300 74.52535 77.925 79.350 1271576 1580457600 2020-01-31 08:00:00 #> 4 81.750 83.300 79.28432 81.300 83.400 1503696 1580889600 2020-02-05 08:00:00 #> 5 79.800 77.500 73.76392 77.200 80.025 2685416 1581321600 2020-02-10 08:00:00 #> 6 74.500 73.925 70.36127 73.900 75.000 1220424 1582185600 2020-02-20 08:00:00 #>   currency    symbol      shortname       longname exchangename #> 1      SEK SAAB-B.ST SAAB AB ser. B Saab AB (publ)          STO #> 2      SEK SAAB-B.ST SAAB AB ser. B Saab AB (publ)          STO #> 3      SEK SAAB-B.ST SAAB AB ser. B Saab AB (publ)          STO #> 4      SEK SAAB-B.ST SAAB AB ser. B Saab AB (publ)          STO #> 5      SEK SAAB-B.ST SAAB AB ser. B Saab AB (publ)          STO #> 6      SEK SAAB-B.ST SAAB AB ser. B Saab AB (publ)          STO #>   fullexchangename timezone #> 1        Stockholm      CET #> 2        Stockholm      CET #> 3        Stockholm      CET #> 4        Stockholm      CET #> 5        Stockholm      CET #> 6        Stockholm      CET"},{"path":"https://clement-lvd.github.io/stockr/reference/valid_symbol.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Financial Symbols via Yahoo Finance API — valid_symbol","title":"Validate Financial Symbols via Yahoo Finance API — valid_symbol","text":"function checks validity one multiple financial symbols using Yahoo Finance's validation API. returns table boolean values indicating whether symbol recognized Yahoo Finance.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/valid_symbol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Financial Symbols via Yahoo Finance API — valid_symbol","text":"","code":"valid_symbol(symbols = NULL, .verbose = T)"},{"path":"https://clement-lvd.github.io/stockr/reference/valid_symbol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Financial Symbols via Yahoo Finance API — valid_symbol","text":"symbols character string list character strings representing financial symbols validate. .verbose logical TRUE, messages displayed invalid symbols detected. Default TRUE.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/valid_symbol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Financial Symbols via Yahoo Finance API — valid_symbol","text":"boolean table one row many columns number symbols provided user. column corresponds symbol, TRUE Yahoo Finance recognizes symbol, FALSE otherwise. Returns NA input character.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/valid_symbol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Financial Symbols via Yahoo Finance API — valid_symbol","text":"","code":"valid_symbol(\"AAPL\") #>   AAPL #> 1 TRUE valid_symbol(c(\"AAPL\", \"GOOGL\", \"INVALID\")) #> Invalid financial symbol(s) : INVALID #>   INVALID GOOGL AAPL #> 1   FALSE  TRUE TRUE"}]
