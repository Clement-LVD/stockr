[{"path":"https://clement-lvd.github.io/stockr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 stockr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clement-lvd.github.io/stockr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clément Laverdet. Author, maintainer.","code":""},{"path":"https://clement-lvd.github.io/stockr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Laverdet C (2025). stockr: Get stock indices companies names (yahoo datas). R package version 0.0.0.9000, https://clement-lvd.github.io/stockr/, https://github.com/clement-LVD/stockr.","code":"@Manual{,   title = {stockr: Get stock indices from companies names (yahoo datas)},   author = {Clément Laverdet},   year = {2025},   note = {R package version 0.0.0.9000,     https://clement-lvd.github.io/stockr/},   url = {https://github.com/clement-LVD/stockr}, }"},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"stockr","dir":"","previous_headings":"","what":"Get stock indices from companies names (yahoo datas)","title":"Get stock indices from companies names (yahoo datas)","text":"stockr R package offers efficient standardized approach retrieve financial data. Data fetched Yahoo Finance API, given company names /indices. stockr functions designed return standardized data.frame standardized column names, values, attributes. package’s aim help quickly reach point financial data analyze, assumptions made analysis tools ’ll used (e.g., dependencies zoo xts time series analysis).","code":""},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get stock indices from companies names (yahoo datas)","text":"can install development version stockr:","code":"devtools::install_github(\"clement-LVD/stockr\")"},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Get stock indices from companies names (yahoo datas)","text":"","code":"library(stockr) # get indices names on the swedish marketplace indices <- fetch_stock_indices(names = c(\"VOLVO\", \"SAAB\") , marketplaces = \"STO\") # search for historical values datas <- fetch_historic(symbols = indices$symbol ) #> ETA :  1  sec'  str(datas) #> 'data.frame':    20070 obs. of  15 variables: #>  $ high            : num  67.4 68.4 60.8 58.9 59.9 ... #>  $ open            : num  58.8 65.6 60.6 58 59.5 ... #>  $ close           : num  65.2 60.6 58 58.9 59.1 ... #>  $ volume          : int  70977504 20388814 14497507 7963166 2874916 1228461 2989143 1889096 1866615 7365218 ... #>  $ low             : num  55 59 56.6 55.8 58 ... #>  $ adjclose        : num  65.2 60.6 58 58.9 59.1 ... #>  $ timestamp       : int  1635490800 1635753600 1635840000 1635926400 1636012800 1636099200 1636358400 1636444800 1636531200 1636617600 ... #>  $ date            : POSIXct, format: \"2021-10-29 09:00:00\" \"2021-11-01 09:00:00\" ... #>  $ currency        : chr  \"SEK\" \"SEK\" \"SEK\" \"SEK\" ... #>  $ symbol          : chr  \"VOLCAR-B.ST\" \"VOLCAR-B.ST\" \"VOLCAR-B.ST\" \"VOLCAR-B.ST\" ... #>  $ longname        : chr  \"Volvo Car AB (publ.)\" \"Volvo Car AB (publ.)\" \"Volvo Car AB (publ.)\" \"Volvo Car AB (publ.)\" ... #>  $ shortname       : chr  \"Volvo Car AB ser. B\" \"Volvo Car AB ser. B\" \"Volvo Car AB ser. B\" \"Volvo Car AB ser. B\" ... #>  $ exchangename    : chr  \"STO\" \"STO\" \"STO\" \"STO\" ... #>  $ fullexchangename: chr  \"Stockholm\" \"Stockholm\" \"Stockholm\" \"Stockholm\" ... #>  $ timezone        : chr  \"CET\" \"CET\" \"CET\" \"CET\" ..."},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"programming-philosophy","dir":"","previous_headings":"","what":"Programming philosophy","title":"Get stock indices from companies names (yahoo datas)","text":"stockr offering standardized data.frame methods retrieve financial data. Company names can provided stockr instead specific ticker symbols, allowing package rely standardized logic exact financial identifier company given stock exchange unknown. variable names returned data.frame stable inherited Yahoo Finance API, though converted lowercase. returned tables always simple data.frame objects. Thus, ’s construct data-analysis objects, e.g., time series objects. Dependencies related data analysis imposed user, e.g., requirement packages like zoo xts.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch historical financial data indices — fetch_historic","title":"Fetch historical financial data indices — fetch_historic","text":"Given indices names, function retrieves historical stock market data (finance.yahoo.com default). Answer data.frame standardized colnames.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch historical financial data indices — fetch_historic","text":"","code":"fetch_historic(   symbols = c(\"SAAB-B.ST\"),   wait.time = 0,   .verbose = T,   src = \"yahoo\" )"},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch historical financial data indices — fetch_historic","text":"symbols character character string representing indices search . wait.time double character string representing indices search . .verbose logical, default = TRUE. TRUE, send messages console src character, default = 'yahoo' src parameters  quantmod::getSymbols.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch historical financial data indices — fetch_historic","text":"data frame columns: - open: value opening marketplace - high: Highest value indice day. - low: Lowest value indice day. - close: Value closing maketplace. - volume: volume operation. - adjusted: adjusted closing value. symbol: original indices names searched date: date values","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch historical financial data indices — fetch_historic","text":"","code":"datas <- fetch_historic(symbols = c(\"VOLCAR-B.ST\", \"SAAB-B.ST\") ) #> ETA :  0.5  sec'"},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_stock_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch stock indices based on a company name — fetch_stock_indices","title":"Fetch stock indices based on a company name — fetch_stock_indices","text":"Given companies names, function retrieves overall stock market data (searching https://finance.yahoo.com ). returns data frame stock symbol various marketplaces , companies names, last price marketplace, sector/category (available), type (always \"stocks\") , exchange marketplace name initially searched companies names.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_stock_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch stock indices based on a company name — fetch_stock_indices","text":"","code":"fetch_stock_indices(names, marketplaces = NULL)"},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_stock_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch stock indices based on a company name — fetch_stock_indices","text":"names character string representing company name search . marketplaces (optionnal) character string representing marketplace(s) consider. Default keep marketplace","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_stock_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch stock indices based on a company name — fetch_stock_indices","text":"data frame columns: - Symbol: stock ticker symbol yahoo - Name: full company name. - Last Price: latest available price. - Sector / Category: sector industry category (available). - Type: type asset (always \"stocks\"). - Exchange: stock exchange place stock. searched: original names searched","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_stock_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch stock indices based on a company name — fetch_stock_indices","text":"","code":"fetch_stock_indices(names = c(\"VOLVO\", \"SAAB\"),  marketplaces = \"STO\"  ) #>         symbol                name last price sector / category   type exchange #> 1  VOLCAR-B.ST Volvo Car AB ser. B      21.89 Consumer Cyclical Stocks      STO #> 4    VOLV-A.ST    Volvo, AB ser. A     308.80       Industrials Stocks      STO #> 6    VOLV-B.ST    Volvo, AB ser. B     308.90       Industrials Stocks      STO #> 26   SAAB-B.ST      SAAB AB ser. B     380.05       Industrials Stocks      STO #>    searched #> 1     VOLVO #> 4     VOLVO #> 6     VOLVO #> 26     SAAB"},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"Given symbol financial value, function retrieves historical financial data Yahoo Finance answer data.frame historical values. data includes open stock price, high, low, close, volume, adjusted close prices, along timestamps (.e. day associated measures).","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"","code":"get_yahoo_data(   symbol = \"AAPL\",   start_date = NULL,   end_date = NULL,   interval = \"1d\" )"},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"symbol character string representing symbol financial instrument (e.g., \"AAPL\" Apple). start_date character string representing start date format \"YYYY-MM-DD\". NULL, data starts 1970-01-01. end_date character string representing end date format \"YYYY-MM-DD\". NULL, data retrieved current date. interval character string representing interval returned datas : default return daily values. intervals filter daily values, depending desired interval. Valid interval \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\".","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"data frame containing historical financial data following columns: volume integer traded volume. high numeric highest price period (default day). open numeric opening price period (default day). low numeric lowest price period (default day). close numeric closing price period (default day). adjclose numeric adjusted closing price period, accounts corporate actions like dividends stock splits. timestamp integer Unix timestamps corresponding data point. date POSIXct day financial data point. currency currency data reported, depending marketplace. symbol stock financial instrument symbol (e.g., \"AAPL\"). longname full name company financial instrument. shortname abbreviated name company financial instrument. exchangename name exchange marketplace financial instrument listed. fullexchangename full name exchange marketplace. timezone timezone data reported.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"default data.frame line day. user provide another interval range '1d' (one day), lines filtered , order match desired interval range. Valid interval ranges : \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\". function allows user specify date range using start end dates. date range specified, retrieves available data beginning time (default start) current date (default end).","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"","code":"data <- get_yahoo_data(symbol = \"SAAB-B.ST\", start_date = \"2020-01-01\", interval = \"5d\")   head(data)#' #>    volume   open    low   high  close adjclose  timestamp                date #> 1 1671108 84.575 83.825 85.050 85.050 80.94995 1579161600 2020-01-16 08:00:00 #> 2  888888 86.000 84.750 86.000 85.300 81.18790 1579593600 2020-01-21 08:00:00 #> 3 1271576 78.825 77.925 79.350 78.300 74.52535 1580457600 2020-01-31 08:00:00 #> 4 1503696 81.750 81.300 83.400 83.300 79.28432 1580889600 2020-02-05 08:00:00 #> 5 2685416 79.800 77.200 80.025 77.500 73.76392 1581321600 2020-02-10 08:00:00 #> 6 1220424 74.500 73.900 75.000 73.925 70.36127 1582185600 2020-02-20 08:00:00 #>   currency    symbol       longname      shortname exchangename #> 1      SEK SAAB-B.ST Saab AB (publ) SAAB AB ser. B          STO #> 2      SEK SAAB-B.ST Saab AB (publ) SAAB AB ser. B          STO #> 3      SEK SAAB-B.ST Saab AB (publ) SAAB AB ser. B          STO #> 4      SEK SAAB-B.ST Saab AB (publ) SAAB AB ser. B          STO #> 5      SEK SAAB-B.ST Saab AB (publ) SAAB AB ser. B          STO #> 6      SEK SAAB-B.ST Saab AB (publ) SAAB AB ser. B          STO #>   fullexchangename timezone #> 1        Stockholm      CET #> 2        Stockholm      CET #> 3        Stockholm      CET #> 4        Stockholm      CET #> 5        Stockholm      CET #> 6        Stockholm      CET   invalid_datas <- get_yahoo_data(symbol =\"SAAB\" ) #> Warning: The value is not associated with a valid currency name ! #> => SAAB is not a valid currency name, according to the Yahoo Finance API. #> See : https://finance.yahoo.com/ or stockr::fetch_stock_indices   invalid_datas #> [1] NA"}]
