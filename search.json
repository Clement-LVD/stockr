[{"path":"https://clement-lvd.github.io/stockr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 stockr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clement-lvd.github.io/stockr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Clément Laverdet. Author, maintainer.","code":""},{"path":"https://clement-lvd.github.io/stockr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Laverdet C (2025). stockr: Fetch Financial Data. R package version 0.1, https://clement-lvd.github.io/stockr/, https://github.com/clement-LVD/stockr.","code":"@Manual{,   title = {stockr: Fetch Financial Data},   author = {Clément Laverdet},   year = {2025},   note = {R package version 0.1,     https://clement-lvd.github.io/stockr/},   url = {https://github.com/clement-LVD/stockr}, }"},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"stockr","dir":"","previous_headings":"","what":"Fetch Financial Data","title":"Fetch Financial Data","text":"stockr R package retrieve financial data Yahoo Finance API, given company names ticker symbols1. stockr functions return standardized data.frame consistent column names, allowing focus directly financial analysis.","code":""},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fetch Financial Data","text":"can install development version stockr:","code":"devtools::install_github(\"clement-LVD/stockr\")"},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Fetch Financial Data","text":"Fetch ticker symbol actual values. Given keyword company name, search latest stock values stockr::fetch_indices. Typically, start retrieving exact ticker symbol using stockr::fetch_indices another way. can use ticker symbols fetch corresponding historical financial data (see ). Fetch historical financial data . Given ticker symbol, get financial values stockr::fetch_historic : data.frame contain daily value. Chaining examples 1 & 2. Fetch ticker symbols associated keyword(s) companies names, get historical financial data symbols.","code":"library(stockr)  toyota_indices <- stockr::fetch_indices(names = \"TOYOTA\")  str(toyota_indices) # Results of the day, over all marketplaces #> 'data.frame':    25 obs. of  7 variables: #>  $ symbol         : chr  \"TM\" \"TOMA.MU\" \"TAH0.MU\" \"TOM.VI\" ... #>  $ name           : chr  \"Toyota Motor Corporation\" \"TOYOTA MOTOR CORP.            R\" \"Toyota Industries Corp.       R\" \"TOYOTA MOTOR CORP\" ... #>  $ last_price     : chr  \"190.70\" \"178.00\" \"86.00\" \"17.61\" ... #>  $ sector_category: chr  \"Consumer Cyclical\" \"Consumer Cyclical\" \"Industrials\" \"Consumer Cyclical\" ... #>  $ type           : chr  \"Stocks\" \"Stocks\" \"Stocks\" \"Stocks\" ... #>  $ exchange       : chr  \"NYQ\" \"MUN\" \"MUN\" \"VIE\" ... #>  $ searched       : chr  \"TOYOTA\" \"TOYOTA\" \"TOYOTA\" \"TOYOTA\" ... # Fetch historical values, given ticker symbol(s) histo <- stockr::fetch_historic(symbols = c(\"SAAB-B.ST\", \"VOLV-B.ST\"), .verbose = FALSE)  str(histo) #> 'data.frame':    12810 obs. of  14 variables: #>  $ low             : num  16.9 16.4 17.1 17.1 16.5 ... #>  $ high            : num  18.5 17.7 17.1 17.1 17 ... #>  $ close           : num  17.4 17.1 17.1 17.1 16.9 ... #>  $ open            : num  18.5 17.7 17.1 17.1 16.5 ... #>  $ volume          : int  313414 294565 0 0 313418 264509 165960 205163 151425 214397 ... #>  $ adjclose        : num  9.86 9.66 9.66 9.66 9.53 ... #>  $ timestamp       : int  946886400 946972800 947059200 947145600 947232000 947491200 947577600 947664000 947750400 947836800 ... #>  $ date            : POSIXct, format: \"2000-01-03 09:00:00\" \"2000-01-04 09:00:00\" ... #>  $ currency        : chr  \"SEK\" \"SEK\" \"SEK\" \"SEK\" ... #>  $ symbol          : chr  \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" \"SAAB-B.ST\" ... #>  $ shortname       : chr  \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" \"SAAB AB ser. B\" ... #>  $ exchangename    : chr  \"STO\" \"STO\" \"STO\" \"STO\" ... #>  $ fullexchangename: chr  \"Stockholm\" \"Stockholm\" \"Stockholm\" \"Stockholm\" ... #>  $ timezone        : chr  \"CET\" \"CET\" \"CET\" \"CET\" ... #>  - attr(*, \"fetch.symbols\")= chr [1:2] \"SAAB-B.ST\" \"VOLV-B.ST\" #>  - attr(*, \"fetch.date\")= Date[1:1], format: \"2025-03-23\" #>  - attr(*, \"fetch.currencies\")= chr \"SEK\" #>  - attr(*, \"n.currencies\")= int 1 # 1) fetch_indices (optionally filter a precise marketplace) indices <- stockr::fetch_indices(names = c(\"VOLVO\", \"SAAB\", \"TOYOTA\")                          , marketplaces = \"BER\") # Keep only the german marketplace (BERlin) informations  # 2) Fetch historical values, given ticker symbol(s) datas <- stockr::fetch_historic(symbols = indices$symbol) #>  #> => 6 request(s) to Yahoo Finance (ETA :  1.5  sec')  VOL3.BE [OK]                                                                                                      VOL1.BE [OK]                                                                                                      SDV0.BE [OK]                                                                                                      SDV1.BE [OK]                                                                                                      TAH.BE [OK]                                                                                                      TOM.BE [OK]                                                                                                      str(datas) #> 'data.frame':    31223 obs. of  14 variables: #>  $ high            : num  4.94 4.9 4.74 4.7 4.76 ... #>  $ open            : num  4.94 4.9 4.74 4.7 4.7 ... #>  $ close           : num  4.94 4.9 4.74 4.7 4.76 ... #>  $ volume          : int  0 0 0 0 0 0 0 0 0 0 ... #>  $ low             : num  4.94 4.9 4.74 4.7 4.7 ... #>  $ adjclose        : num  0.000575 0.000571 0.000552 0.000547 0.000554 ... #>  $ timestamp       : int  946882800 946969200 947055600 947142000 947228400 947487600 947574000 947660400 947746800 947833200 ... #>  $ date            : POSIXct, format: \"2000-01-03 08:00:00\" \"2000-01-04 08:00:00\" ... #>  $ currency        : chr  \"EUR\" \"EUR\" \"EUR\" \"EUR\" ... #>  $ symbol          : chr  \"VOL3.BE\" \"VOL3.BE\" \"VOL3.BE\" \"VOL3.BE\" ... #>  $ shortname       : chr  \"Volvo (publ), AB              N\" \"Volvo (publ), AB              N\" \"Volvo (publ), AB              N\" \"Volvo (publ), AB              N\" ... #>  $ exchangename    : chr  \"BER\" \"BER\" \"BER\" \"BER\" ... #>  $ fullexchangename: chr  \"Berlin\" \"Berlin\" \"Berlin\" \"Berlin\" ... #>  $ timezone        : chr  \"CET\" \"CET\" \"CET\" \"CET\" ... #>  - attr(*, \"fetch.symbols\")= chr [1:6] \"VOL3.BE\" \"VOL1.BE\" \"SDV0.BE\" \"SDV1.BE\" ... #>  - attr(*, \"fetch.date\")= Date[1:1], format: \"2025-03-23\" #>  - attr(*, \"fetch.currencies\")= chr \"EUR\" #>  - attr(*, \"n.currencies\")= int 1"},{"path":[]},{"path":[]},{"path":"https://clement-lvd.github.io/stockr/index.html","id":"returned-dataframe-philosophy","dir":"","previous_headings":"Technical details","what":"Returned data.frame philosophy","title":"Fetch Financial Data","text":"stockr functions (fetch_historic & fetch_indices) returns standardized data.frame containing financial data Yahoo Finance API. returned data always form data.frame object. variable names returned data.frame consistent inherited directly Yahoo Finance API, although converted lowercase. Dependencies keep minimal data analysis package dependencies imposed user : assumptions made analysis tools ’ll used (e.g., dependencies zoo xts time series analysis since stockr return time series objects).","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch historical financial data indices — fetch_historic","title":"Fetch historical financial data indices — fetch_historic","text":"Given indices names (.e. ticker symbol), function retrieves historical stock market data finance.yahoo.com. Answer data.frame standardized colnames.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch historical financial data indices — fetch_historic","text":"","code":"fetch_historic(symbols = c(\"SAAB-B.ST\"), wait.time = 0, .verbose = T, ...)"},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch historical financial data indices — fetch_historic","text":"symbols character character string representing indices search . wait.time double character string representing indices search . .verbose logical, default = TRUE. TRUE, send messages console. ... Parameters passed get_yahoo_data interval two lines, start_date end_date","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch historical financial data indices — fetch_historic","text":"data frame columns: - low: Lowest value indice day. - high: Highest value indice day. - close: Value closing maketplace. - open: value opening marketplace - volume: volume operation. - adjclose: adjusted closing value. timestamp: date values date: date values symbol: original indices names searched shortname: name value exchangename: financial place abbreviation fullexchangename: full name financial place timezone: timezone, e.g., 'CET' Central European Time data.frame additional attributes : fetch.symbols: symbols originally asked user fetch.date: date data retrieved fetch.currencies: currencies within data.frame n.currencies: number currencies within data.frame","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_historic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch historical financial data indices — fetch_historic","text":"","code":"# \\donttest{ datas <- fetch_historic(symbols = c(\"VOLCAR-B.ST\", \"SAAB-B.ST\") ) #>  #> => 2 request(s) to Yahoo Finance (ETA :  0.5  sec')   VOLCAR-B.ST [OK]                                                                                                       SAAB-B.ST [OK]                                                                                                                                                                                                         # }"},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch ticker stock indices based on a company name — fetch_indices","title":"Fetch ticker stock indices based on a company name — fetch_indices","text":"Given companies names, function retrieves overall stock market data (searching https://finance.yahoo.com ). returns data frame ticker symbol various marketplaces , companies names, last price marketplace, sector/category (available), type (always \"stocks\") , exchange marketplace name initially searched companies names.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch ticker stock indices based on a company name — fetch_indices","text":"","code":"fetch_indices(names, marketplaces = NULL)"},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch ticker stock indices based on a company name — fetch_indices","text":"names character string representing company name search . marketplaces (optionnal) character string representing marketplace(s) consider. Default keep marketplace","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch ticker stock indices based on a company name — fetch_indices","text":"data frame columns: - symbol: stock ticker symbol yahoo - name: full company name. - last_price: latest available price. - sector_category: sector industry category (available). - type: type asset (always \"stocks\"). - exchange: stock exchange place stock. searched: original names searched","code":""},{"path":[]},{"path":"https://clement-lvd.github.io/stockr/reference/fetch_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch ticker stock indices based on a company name — fetch_indices","text":"","code":"# \\donttest{ fetch_indices(names = c(\"VOLVO\", \"SAAB\"),  marketplaces = \"STO\") #>         symbol                name last_price   sector_category   type exchange #> 3  VOLCAR-B.ST Volvo Car AB ser. B      21.89 Consumer Cyclical Stocks      STO #> 4    VOLV-A.ST    Volvo, AB ser. A     308.80       Industrials Stocks      STO #> 15   VOLV-B.ST    Volvo, AB ser. B     308.90       Industrials Stocks      STO #> 26   SAAB-B.ST      SAAB AB ser. B     380.05       Industrials Stocks      STO #>    searched #> 3     VOLVO #> 4     VOLVO #> 15    VOLVO #> 26     SAAB # }"},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"Given symbol financial value, function retrieves historical financial data Yahoo Finance answer data.frame historical values. data includes open stock price, high, low, close, volume, adjusted close prices, along timestamps (.e. day associated measures).","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"","code":"get_yahoo_data(   symbol = \"AAPL\",   start_date = NULL,   end_date = NULL,   interval = \"1d\" )"},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"symbol character string representing symbol financial instrument (e.g., \"AAPL\" Apple). start_date character string representing start date format \"YYYY-MM-DD\". NULL, data starts 1970-01-01. end_date character string representing end date format \"YYYY-MM-DD\". NULL, data retrieved current date. interval character string representing interval returned datas : default return daily values. intervals filter daily values, depending desired interval. Valid interval \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\".","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"data frame containing historical financial data following columns: volume integer traded volume. high numeric highest price period (default day). open numeric opening price period (default day). low numeric lowest price period (default day). close numeric closing price period (default day). adjclose numeric adjusted closing price period, accounts corporate actions like dividends stock splits. timestamp integer Unix timestamps corresponding data point. date POSIXct day financial data point. currency currency data reported, depending marketplace. symbol stock financial instrument symbol (e.g., \"AAPL\"). longname full name company financial instrument. shortname abbreviated name company financial instrument. exchangename name exchange marketplace financial instrument listed. fullexchangename full name exchange marketplace. timezone timezone data reported.","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"default data.frame line day. user provide another interval range '1d' (one day), lines filtered , order match desired interval range. Valid interval ranges : \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\". function allows user specify date range using start end dates. date range specified, retrieves available data beginning time (default start) current date (default end).","code":""},{"path":"https://clement-lvd.github.io/stockr/reference/get_yahoo_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Yahoo Finance Data for a Given Symbol — get_yahoo_data","text":"","code":"# \\donttest{   data <- get_yahoo_data(symbol = \"SAAB-B.ST\", start_date = \"2020-01-01\", interval = \"5d\")   head(data) #>      low   open   high  close  volume adjclose  timestamp                date #> 1 83.825 84.575 85.050 85.050 1671108 80.94995 1579161600 2020-01-16 08:00:00 #> 2 84.750 86.000 86.000 85.300  888888 81.18790 1579593600 2020-01-21 08:00:00 #> 3 77.925 78.825 79.350 78.300 1271576 74.52536 1580457600 2020-01-31 08:00:00 #> 4 81.300 81.750 83.400 83.300 1503696 79.28432 1580889600 2020-02-05 08:00:00 #> 5 77.200 79.800 80.025 77.500 2685416 73.76392 1581321600 2020-02-10 08:00:00 #> 6 73.900 74.500 75.000 73.925 1220424 70.36127 1582185600 2020-02-20 08:00:00 #>   currency    symbol      shortname exchangename fullexchangename timezone #> 1      SEK SAAB-B.ST SAAB AB ser. B          STO        Stockholm      CET #> 2      SEK SAAB-B.ST SAAB AB ser. B          STO        Stockholm      CET #> 3      SEK SAAB-B.ST SAAB AB ser. B          STO        Stockholm      CET #> 4      SEK SAAB-B.ST SAAB AB ser. B          STO        Stockholm      CET #> 5      SEK SAAB-B.ST SAAB AB ser. B          STO        Stockholm      CET #> 6      SEK SAAB-B.ST SAAB AB ser. B          STO        Stockholm      CET   # }"}]
